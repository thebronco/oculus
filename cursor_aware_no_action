cursor aware of this but take no application

Step‑by‑step in Cursor (PowerShell)
1) Make the project folders

Open a PowerShell terminal in Cursor and run:

mkdir oculusni; cd oculus
mkdir app lambdas cdk

2) Add the files (copy/paste)

Create these files in Cursor’s sidebar and paste the contents I already gave you:

Repo root

deploy.ps1 (Windows deploy script)

destroy.ps1 (Windows teardown script)

check_leftovers.ps1 (optional)

UI

app\package.json

app\next.config.js

app\src\app\page.tsx

Lambdas

lambdas\package.json

lambdas\api.ts

lambdas\seed.ts

CDK

cdk\package.json

cdk\tsconfig.json

cdk\bin\cdk.ts

cdk\lib\stack.ts

Important in cdk\lib\stack.ts:

All names are prefixed oculus_

RDS is t3.micro (free‑tier eligible)

RDS Proxy is enabled and both Lambdas use DB_HOST = proxy.endpoint

S3 bucket has autoDeleteObjects: true and removalPolicy: DESTROY

Secret has removalPolicy: DESTROY

DB has deletionProtection: false and removalPolicy: DESTROY

3) Allow scripts in this terminal session
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

4) (First‑time only) CDK bootstrap

Harmless if it’s already done:

cd .\cdk
npx cdk bootstrap
cd ..

5) Deploy everything (build → infra → seed → site upload)

From repo root:

.\deploy.ps1


This builds the static Next.js page,

deploys VPC/DB/Proxy/Lambdas/API/S3+CloudFront,

seeds the DB (creates tables + inserts the one NIST‑CSF question),

rebuilds the UI with the real API URL,

redeploys the site.

At the end it prints:

API URL (ends with /prod/)

Site URL (CloudFront)

6) Quick verify
# Should return the one question with yes/no answers from Postgres
Invoke-RestMethod -Method Get -Uri "<API URL>survey/nist-csf"


Open the Site URL in your browser — you’ll see the same question rendered.

7) Common dev loop

Change Lambda code (lambdas\api.ts or lambdas\seed.ts):

cd .\cdk
npx cdk deploy --require-approval never
cd ..


Change UI (app\src\app\page.tsx):

$env:NEXT_PUBLIC_API_URL = "<API URL>"
cd .\app; npm run build; cd ..
cd .\cdk; npx cdk deploy --require-approval never; cd ..

8) Tear everything down (no surprises on cost)

From repo root:

.\destroy.ps1


(Optional sanity check afterward):

.\check_leftovers.ps1

What you’ll have running

API Gateway

GET /survey/nist-csf → lambdas/api.ts (reads Postgres via RDS Proxy)

POST /admin/seed → lambdas/seed.ts (creates tables & inserts one question; idempotent)

RDS Postgres (t3.micro, free‑tier eligible) + RDS Proxy

Secrets Manager for DB creds

VPC with subnets + security groups (all prefixed oculus_)

S3 + CloudFront hosting your static Next.js page

If anything fails, check CloudWatch Logs for the Lambda (function names start with oculus_) and verify:

oculus_db_sg allows inbound 5432 from oculus_lambda_sg

Lambdas and Proxy are in the private‑egress subnets; DB is in isolated

Secret name is oculus_db_secret and both Lambdas have DB_SECRET_ARN set